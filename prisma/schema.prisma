// Simplified Prisma schema for SQLite development
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Simplified User model
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  phone         String?
  company       String?
  memberType    String   @default("REGULAR") // REGULAR, PREMIUM, EXECUTIVE, ADMIN
  location      String?
  website       String?
  joinDate      DateTime @default(now())
  lastActive    DateTime @default(now())
  isActive      Boolean  @default(true)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Simplified Opportunity model for NAMC project opportunities
model Opportunity {
  id              String   @id @default(cuid())
  title           String
  description     String
  type            String   // Construction, Training, Outreach, Other
  status          String   // Active, In Progress, Completed, Under Review
  datePosted      DateTime
  deadline        DateTime?
  contactInfo     String?
  location        String?
  estimatedValue  Float?
  
  // Requirements and tags as JSON strings
  requirements    String?  // JSON array as string
  tags            String?  // JSON array as string
  
  // AI Analysis fields
  claudeAnalysis   String?  // JSON as string
  opportunityScore Float?
  complexityScore  Float?
  matchScore       Float?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Chat conversation model for Construction Assistant
model ChatConversation {
  id        String   @id @default(cuid())
  memberId  String
  title     String?
  metadata  String?  // JSON as string for conversation context
  
  messages  ChatMessage[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Chat message model
model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // 'user' or 'assistant'
  content        String
  metadata       String?  // JSON as string for message metadata
  
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Cost estimate model for AI cost estimation feature
model CostEstimate {
  id                String   @id @default(cuid())
  memberId          String
  projectName       String
  projectType       String
  location          String
  squareFootage     Float?
  stories           Int?
  duration          Int?
  description       String?
  
  // Scope and requirements as JSON strings
  scope             String?  // JSON array as string
  requirements      String?  // JSON array as string
  
  // Cost breakdown
  totalEstimate     Float
  costBreakdown     String?  // JSON as string
  confidenceScore   Float?
  riskLevel         String?
  
  // AI insights
  aiInsights        String?  // JSON as string
  recommendations   String?  // JSON as string
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}